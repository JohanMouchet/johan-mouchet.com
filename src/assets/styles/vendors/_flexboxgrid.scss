/*! Flexboxgrid-sass | MIT License | https://github.com/JohanMouchet/flexboxgrid-sass */

/* Config */
$grid-division: 12 !default;
$grid-gutter: 1rem !default;
$grid-gutter-lg: $grid-gutter * 3 !default;
$grid-outer-margin: $grid-gutter + 1 !default;

$grid-half-gutter: $grid-gutter / 2;
$grid-half-gutter-lg: $grid-gutter-lg / 2;

// Breakpoints (Mobile first)
$grid-breakpoints: (
	// (xs : Extra small devices (phones): 0 and up)
	sm: 425px + 1, // Small devices (tablets): 425px and up
	md: 768px + 1, // Medium devices (desktops): 768px and up
	lg: 1024px + 1, // Large devices (large desktops): 1024px and up
	xl: 1366px + 1, // Extra large devices (extra large desktops): 1366px and up
) !default;

// @import 'flexboxgrid-debug'; // Optional

/* Test */
@if ($grid-outer-margin < $grid-half-gutter) {
	@warn 'To avoid overflow, the `$grid-outer-margin` has to be as large or larger than the `$grid-gutter`. This is for the `.container` to cancel the `.grid` negative margins used to align the `.cells`.';
}

/* Container */
.container {
	box-sizing: border-box;
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	padding-left: $grid-outer-margin;
	padding-right: $grid-outer-margin;
	position: relative;
}

/** No gutters **/
.container--noGutter {
	padding-left: $grid-half-gutter;
	padding-right: $grid-half-gutter;
}

/** No gutters large grid **/
.container--noGutter-lgGrid {
	padding-left: $grid-half-gutter-lg;
	padding-right: $grid-half-gutter-lg;
}

/** Sizes **/
@mixin container-modifiers($bp-short, $bp-size) {
	.container--#{$bp-short} {
		max-width: #{$bp-size};
	}
}

/* Grid */
.grid {
	box-sizing: border-box;
	display: flex;
	flex-wrap: wrap;
	margin-left: - $grid-half-gutter;
	margin-right: - $grid-half-gutter;
}

@mixin grid-modifiers($bp-short) {
	/** Direction **/
	.grid--row-\@#{$bp-short} {
		flex-direction: row;
	}

	.grid--rowReverse-\@#{$bp-short} {
		flex-direction: row-reverse;
	}

	/** Wrap **/
	.grid--wrap-\@#{$bp-short} {
		flex-wrap: wrap;
	}

	.grid--noWrap-\@#{$bp-short} {
		flex-wrap: nowrap;
	}

	/** Gutters **/
	/*** Large ***/
	.grid--lgGutter-\@#{$bp-short} {
		margin-left: - $grid-half-gutter-lg;
		margin-right: - $grid-half-gutter-lg;

		> .cell {
			padding-left: $grid-half-gutter-lg;
			padding-right: $grid-half-gutter-lg;
		}
	}

	/** None **/
	.grid--noGutter-\@#{$bp-short} {
		margin-left: 0;
		margin-right: 0;

		> .cell {
			padding-left: 0;
			padding-right: 0;
		}
	}

	/** Justification X axis **/
	.grid--xStart-\@#{$bp-short} {
		justify-content: flex-start;
	}

	.grid--xCenter-\@#{$bp-short} {
		justify-content: center;
	}

	.grid--xEnd-\@#{$bp-short} {
		justify-content: flex-end;
	}

	.grid--xAround-\@#{$bp-short} {
		justify-content: space-around;
	}

	.grid--xBetween-\@#{$bp-short} {
		justify-content: space-between;
	}

	/** Justification Y axis **/
	.grid--yStretch-\@#{$bp-short} {
		align-items: stretch;
	}

	.grid--yStart-\@#{$bp-short} {
		align-items: flex-start;
	}

	.grid--yCenter-\@#{$bp-short} {
		align-items: center;
	}

	.grid--yEnd-\@#{$bp-short} {
		align-items: flex-end;
	}

	/** Justification Y axis when wrapped: Z **/
	.grid--zStretch-\@#{$bp-short} {
		align-content: stretch;
	}

	.grid--zStart-\@#{$bp-short} {
		align-content: flex-start;
	}

	.grid--zCenter-\@#{$bp-short} {
		align-content: center;
	}

	.grid--zEnd-\@#{$bp-short} {
		align-content: flex-end;
	}

	.grid--zAround-\@#{$bp-short} {
		align-content: space-around;
	}

	.grid--zBetween-\@#{$bp-short} {
		align-content: space-between;
	}
}

/* Cells */
.cell {
	box-sizing: border-box;
	flex: 0 1 auto;
	padding-left: $grid-half-gutter;
	padding-right: $grid-half-gutter;
}

@mixin cell-modifiers($bp-short) {
	/** Sizes **/
	@for $i from 1 through $grid-division {
		.cell--#{$i}-\@#{$bp-short} {
			flex-basis: percentage($i / $grid-division);
			max-width: percentage($i / $grid-division);
		}
	}

	/** Collapsed **/
	.cell--0-\@#{$bp-short} {
		flex-grow: 0;
		flex-basis: auto;
		max-width: none;
	}

	/** Expended **/
	.cell--\@#{$bp-short} {
		flex-grow: 1;
		flex-basis: auto;
		max-width: none;
	}

	/** No gutters **/
	.cell--noGutter-\@#{$bp-short} {
		padding-left: 0;
		padding-right: 0;
	}

	/** Gutters **/
	.cell--gutter-\@#{$bp-short} {
		padding-left: $grid-half-gutter;
		padding-right: $grid-half-gutter;
	}

	[class*='grid--lgGutter'] > .cell--gutter-\@#{$bp-short} {
		padding-left: $grid-half-gutter-lg;
		padding-right: $grid-half-gutter-lg;
	}

	/** Visibility **/
	.cell--hidden-\@#{$bp-short} {
		display: none;
	}

	.cell--visible-\@#{$bp-short} {
		display: block;
	}

	/** Self justification Y axis **/
	.cell--yStretch-\@#{$bp-short} {
		align-self: stretch;
	}

	.cell--yStart-\@#{$bp-short} {
		align-self: flex-start;
	}

	.cell--yCenter-\@#{$bp-short} {
		align-self: center;
	}

	.cell--yEnd-\@#{$bp-short} {
		align-self: flex-end;
	}

	/** Self justification X axis **/
	.cell--xCenter-\@#{$bp-short} {
		margin-left: auto;
		margin-right: auto;
	}

	.cell--xStart-\@#{$bp-short} {
		margin-right: auto;
	}

	.cell--xEnd-\@#{$bp-short} {
		margin-left: auto;
	}

	/** Order **/
	.cell--first-\@#{$bp-short} {
		order: -1;
	}

	.cell--last-\@#{$bp-short} {
		order: 1;
	}

	.cell--ordered-\@#{$bp-short} {
		order: 0;
	}
}

/** Modifiers **/
@include grid-modifiers('xs');
@include cell-modifiers('xs');

@each $bp-short, $bp-size in $grid-breakpoints {
	@include container-modifiers($bp-short, $bp-size);

	@media (min-width: $bp-size) {
		@include grid-modifiers($bp-short);
		@include cell-modifiers($bp-short);
	}
}
